#!/usr/bin/env python3
import argparse
import csv
import github
import jinja2
import os
import yaml


def get_packages():
    packages = []

    with open(os.path.join("data", "packages.csv")) as f:
        reader = csv.DictReader(f)
        for row in reader:
            recipe_name = row["repository"].split("github.com/")[1]
            recipe_path = os.path.join("packages", recipe_name + ".yml")
            if not os.path.isfile(recipe_path):
                recipe_name = ""
                recipe_path = ""

            packages.append(
                {
                    "repository": {
                        "name": row["repository"].split("github.com/")[1],
                        "url": row["repository"],
                    },
                    "default_branch": row["default_branch"],
                    "latest_release": row["latest_release"],
                    "recipe": {
                        "name": recipe_name,
                        "path": recipe_path,
                    },
                }
            )

    packages = sorted(packages, key=lambda x: x["repository"]["name"])

    return packages


def update_packages():
    GITHUB_ACCESS_TOKEN = os.environ.get("GITHUB_ACCESS_TOKEN", "")

    client = github.Github(GITHUB_ACCESS_TOKEN)

    data = []

    for repo in client.get_organization("elementary").get_repos():
        if repo.archived:
            continue

        latest_release = None
        try:
            latest_release = repo.get_latest_release().tag_name
        except:
            pass

        print(repo.html_url, repo.default_branch, latest_release)

        data.append({
            "repository": repo.html_url,
            "default_branch": repo.default_branch,
        })

    data = sorted(data, key=lambda x: x["repository"])

    with open(os.path.join("data", "packages.csv"), "w", newline="") as csvfile:
        fieldnames = ["repository", "default_branch", "latest_release"]
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

        writer.writeheader()
        for row in data:
            writer.writerow(row)


def update_readme(packages):
    context = {
        "packages": packages,
    }

    template_text = open(os.path.join("data", "README.md.jinja2"), "r").read()
    template = jinja2.Template(template_text)
    text = template.render(context)

    f = open("README.md", "w")
    f.write(text)


def update_recipes(packages):
    packages_recipes_dir = os.path.abspath("packages")

    class Dumper(yaml.Dumper):
        def increase_indent(self, flow=False, *args, **kwargs):
            return super().increase_indent(flow=flow, indentless=False)

    for dirpath, dirnames, filenames in os.walk(packages_recipes_dir):
        for file in filenames:
            path = os.path.join(dirpath, file)

            with open(path, "r") as rf:
                package = yaml.safe_load(rf)

                for p in packages:
                    if package["name"] == p["repository"]["name"]:
                        for source in package["sources"]:
                            if source["url"] == p["repository"]["url"]:
                                if source["tag"] != p["default_branch"]:
                                    print(f"New release for {package['name']} available: {source['tag']} â†’ {p['default_branch']}")
                                    source["tag"] = p["default_branch"]

                                    with open(path, "w") as wf:
                                        yaml.dump(package, wf, Dumper=Dumper, sort_keys=False)


def update_workflows(packages):
    context = {
        "packages": [],
    }

    for package in packages:
        recipe_name = package.get("recipe", {}).get("name", None)
        if not recipe_name:
            continue

        context["packages"].append(recipe_name)

    context["packages"].sort()

    template_text = open(os.path.join("data", ".github", "workflows", "ubuntu:22.04.yml.jinja2"), "r").read()
    template = jinja2.Template(template_text)
    text = template.render(context)

    f = open(os.path.join(".github", "workflows", "ubuntu:22.04.yml"), "w")
    f.write(text)


def main(args):
    if args.packages:
        update_packages()

    if args.readme:
        update_readme(get_packages())
    
    if args.workflows:
        update_workflows(get_packages())

    if args.recipes:
        update_recipes(get_packages())

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--packages", action="store_true")
    parser.add_argument("--readme", action="store_true")
    parser.add_argument("--workflows", action="store_true")
    parser.add_argument("--recipes", action="store_true")

    main(parser.parse_args())
